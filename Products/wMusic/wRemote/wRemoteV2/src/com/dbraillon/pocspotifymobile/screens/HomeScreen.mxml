<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		preinitialize="view_preinitializeHandler(event)"
		backgroundColor="{ColorsConstant.darkGrey}" actionBarVisible="false">
	
	<fx:Script>
		<![CDATA[
			import com.dbraillon.pocspotifymobile.connections.BridgeConnection;
			import com.dbraillon.pocspotifymobile.connections.SpotifyConnection;
			import com.dbraillon.pocspotifymobile.constants.ColorsConstant;
			import com.dbraillon.pocspotifymobile.models.IconItem;
			import com.dbraillon.pocspotifymobile.screens.spotify.SpotifyParameterScreen;
			import com.dbraillon.pocspotifymobile.screens.spotify.SpotifyScreen;
			
			import mx.collections.ArrayList;
			import mx.events.FlexEvent;
			
			[Bindable]
			private var _listData:ArrayList;
			
			protected function view_preinitializeHandler(event:FlexEvent):void
			{
				_listData = new ArrayList();
				
				var playlistItem:IconItem =	new IconItem("SPOTIFY", "", "", "", false);
				var playingItem:IconItem =	new IconItem("YOUTUBE", "", "", "", false);
				var starredItem:IconItem =	new IconItem("DEEZER", "", "", "", false);
				var accountItem:IconItem =	new IconItem("LAST.FM", "", "", "", false);
				var whatsNewItem:IconItem =	new IconItem("ITUNES", "", "", "", false);
				var searchItem:IconItem =	new IconItem("LOCAL", "", "", "", false);
				var parameterItem:IconItem = new IconItem("PARAMETER", "", "", "", false);
				
				_listData.addItem(playlistItem);
				_listData.addItem(playingItem);
				_listData.addItem(starredItem);
				_listData.addItem(accountItem);
				_listData.addItem(whatsNewItem);
				_listData.addItem(searchItem);
				_listData.addItem(parameterItem);
			}
			
			protected function menuList_clickHandler(event:MouseEvent):void
			{
				if(menuList.selectedIndex != -1)
				{
					var selectedItem:IconItem = event.currentTarget.dataProvider.source[menuList.selectedIndex];
					
					switch(selectedItem.label)
					{
						case "SPOTIFY":
							
							// doit rechercher en local si des id et password sont disponible sinon affiche la fenêtre de Log
							var spotifyConnection:SpotifyConnection = SpotifyConnection.getInstance();
							
							if(spotifyConnection.connected || spotifyConnection.connecting)
							{
								navigator.pushView(SpotifyScreen);
							}
							else
							{
								navigator.pushView(SpotifyParameterScreen, "fromHome");
							}
							
							break;
						
						case "YOUTUBE":
							BridgeConnection.getInstance().sendLoginPassword("othane", "TestRaphio");
							break;
						
						case "DEEZER":
							break;
						
						case "LAST.FM":
							break;
						
						case "ITUNES":
							break;
						
						case "LOCAL":
							break;
						
						case "SETTINGS":
							break;
					}
				}
			}
			
			protected function quitButton_clickHandler(event:MouseEvent):void
			{
				// arrête l'application
			}
			
		]]>
	</fx:Script>
	
	<s:VGroup width="100%" height="100%">
		
		<s:HGroup height="34" width="100%" gap="0">
			
			<s:Button id="quitButton" click="quitButton_clickHandler(event)"
					  skinClass="com.dbraillon.pocspotifymobile.skins.QuitButtonSkin"/>
			
			<s:VGroup height="100%" width="100%" paddingTop="6" paddingLeft="30">
				
				<s:Label text="WVIBES" fontSize="8" color="{ColorsConstant.mediumGrey}" fontWeight="bold"
						 width="100%" height="40%"/>
				
				<s:Label text="Menu" fontSize="13" color="{ColorsConstant.lightGrey}" fontWeight="bold"
						 width="100%" height="60%"/>
				
			</s:VGroup>
			
			<s:Button id="queueButton"
					  skinClass="com.dbraillon.pocspotifymobile.skins.QueueButtonSkin"/>
			
		</s:HGroup>
		
		<s:List id="menuList"
				height="100%" width="100%"
				itemRenderer="com.dbraillon.pocspotifymobile.renderers.IconItemRenderer"
				dataProvider="{_listData}"
				click="menuList_clickHandler(event)"
				contentBackgroundColor="{ColorsConstant.white}" alternatingItemColors="[0xEEEEEE, 0xE0E0E0]"
				color="{ColorsConstant.darkGrey}" borderColor="{ColorsConstant.darkGrey}" fontWeight="bold">
			
		</s:List>
		
	</s:VGroup>
	
</s:View>
